{
  "address": "0x8a3693cBd71d77D4341c6a2d088DC03f22EA556a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorized",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "Session",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenNonce",
          "type": "uint256"
        }
      ],
      "name": "createMessage",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorized",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "createSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "authorizer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IForwardRequest.ERC721ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "executeWithProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        }
      ],
      "name": "getSession",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "authorized",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiresAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct IForwardRequest.PlaySession",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invalidateSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownershipSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "authorizer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IForwardRequest.ERC721ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "preflight",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSigner",
          "type": "address"
        }
      ],
      "name": "setOwnershipSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "urls",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "authorizer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IForwardRequest.ERC721ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "authorizer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IForwardRequest.ERC721ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyOwnershipProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdec79d58f4e3c25381d223aabe9c1a6b78bdb3c0d1363ea48aafbee724ed06a7",
  "receipt": {
    "to": null,
    "from": "0xc0F5b93Bb77271d9CE898d08013f4958d1478534",
    "contractAddress": "0x8a3693cBd71d77D4341c6a2d088DC03f22EA556a",
    "transactionIndex": 1,
    "gasUsed": "2082623",
    "logsBloom": "0x
    "blockHash": "0x09ed07fedf25869f07ee2a0e8ea351cc91747deaa483a18e43a86b732c590906",
    "transactionHash": "0xdec79d58f4e3c25381d223aabe9c1a6b78bdb3c0d1363ea48aafbee724ed06a7",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 25545079,
        "transactionHash": "0xdec79d58f4e3c25381d223aabe9c1a6b78bdb3c0d1363ea48aafbee724ed06a7",
        "address": "0x8a3693cBd71d77D4341c6a2d088DC03f22EA556a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c0f5b93bb77271d9ce898d08013f4958d1478534",
          "0x000000000000000000000000c0f5b93bb77271d9ce898d08013f4958d1478534"
        ],
        "data": "0x",
        "logIndex": 101,
        "blockHash": "0x09ed07fedf25869f07ee2a0e8ea351cc91747deaa483a18e43a86b732c590906"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 25545079,
        "transactionHash": "0xdec79d58f4e3c25381d223aabe9c1a6b78bdb3c0d1363ea48aafbee724ed06a7",
        "address": "0x8a3693cBd71d77D4341c6a2d088DC03f22EA556a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000c0f5b93bb77271d9ce898d08013f4958d1478534",
          "0x000000000000000000000000c0f5b93bb77271d9ce898d08013f4958d1478534"
        ],
        "data": "0x",
        "logIndex": 102,
        "blockHash": "0x09ed07fedf25869f07ee2a0e8ea351cc91747deaa483a18e43a86b732c590906"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 25545079,
        "transactionHash": "0xdec79d58f4e3c25381d223aabe9c1a6b78bdb3c0d1363ea48aafbee724ed06a7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c0f5b93bb77271d9ce898d08013f4958d1478534",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000ddf80997e1c1dd00000000000000000000000000000000000000000000000005f60eb55c46ba6c0000000000000000000000000000000000000000000008142e47cb5790654cb5000000000000000000000000000000000000000000000000051816abc464f88f0000000000000000000000000000000000000000000008142f25c36128470e92",
        "logIndex": 103,
        "blockHash": "0x09ed07fedf25869f07ee2a0e8ea351cc91747deaa483a18e43a86b732c590906"
      }
    ],
    "blockNumber": 25545079,
    "cumulativeGasUsed": "3174099",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "https://middleware.nfight.xyz"
    ]
  ],
  "solcInputHash": "906e251cfe044c858a7be1747c8b872c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorized\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"Session\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenNonce\",\"type\":\"uint256\"}],\"name\":\"createMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorized\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"createSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IForwardRequest.ERC721ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"executeWithProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"}],\"name\":\"getSession\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"authorized\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"internalType\":\"struct IForwardRequest.PlaySession\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invalidateSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IForwardRequest.ERC721ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"preflight\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"setOwnershipSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"urls\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IForwardRequest.ERC721ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IForwardRequest.ERC721ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyOwnershipProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createMessage(address,uint256,address,uint256,uint256)\":{\"details\":\"The RPC server uses this view function to create the ownership proof\",\"params\":{\"nftContract\":\"the mainnet contract address for the NFT being utilized\",\"nftOwner\":\"the address that currently owns the L1 NFT\",\"nonce\":\"the meta-transaction nonce for account\",\"tokenId\":\"the tokenId from nftContract for the NFT being utilized\"},\"returns\":{\"_0\":\"the message _ownershipSigner should sign\"}},\"executeWithProof(bytes,bytes)\":{\"details\":\"The RPC call and re-submission should be handled by your Relayer client\",\"params\":{\"extraData\":\"The unaltered bytes in the OffchainLookup extraData error arg\",\"response\":\"The unaltered bytes reponse from a call made to an RPC based on OffchainLookup args\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"invalidateSession()\":{\"details\":\"For efficiency in PlaySession persistence and lookup, an EOA must authorize      itself\"},\"ownershipSigner()\":{\"returns\":{\"_0\":\"the ownership proof signer address\"}},\"preflight((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)\":{\"details\":\"Per EIP-3668, a valid signature will cause a revert with useful error params.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"verify((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)\":{\"details\":\"Useful for transactions where the signer is not using a specific NFT, but values are still required in the signature - use the zero address for nftContract and 0 for tokenId\"},\"verifyOwnershipProof((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)\":{\"details\":\"Ensures that _ownershipSigner signed a message containing (nftOwner OR authorized address, nonce, nftContract, tokenId)\",\"params\":{\"req\":\"structured data submitted by EOA making a meta-transaction request\",\"signature\":\"the signature proof created by the ownership signer EOA\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createMessage(address,uint256,address,uint256,uint256)\":{\"notice\":\"Construct message that _ownershipSigner must sign as ownership proof\"},\"createSession(address,uint256)\":{\"notice\":\"Allow `authorized` to use your NFTs in a game for `length` seconds. Your NFTs         will not be held in custody or approved for transfer.\"},\"executeWithProof(bytes,bytes)\":{\"notice\":\"Re-submit a valid meta-tx request with trusted proof to execute the transaction.\"},\"getNonce(address)\":{\"notice\":\"Get current nonce for EOA\"},\"getSession(address)\":{\"notice\":\"Get current session for Primary EOA\"},\"invalidateSession()\":{\"notice\":\"Stop allowing your current authorized burner address to use your NFTs.\"},\"ownershipSigner()\":{\"notice\":\"Get ownershipSigner address\"},\"preflight((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)\":{\"notice\":\"Submit a meta-tx request and signature to check validity and receive         a response with data useful for fetching a trusted proof per EIP-3668.\"},\"setOwnershipSigner(address)\":{\"notice\":\"Change the ownership signer\"},\"verify((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)\":{\"notice\":\"Submit a meta-tx request where a proof of ownership is not required.\"},\"verifyOwnershipProof((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)\":{\"notice\":\"Verify signed OffchainLookup proof against meta-tx request data\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFightGasStation/NFightGasStation.sol\":\"NFightGasStation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Libraries/fwd/EssentialEIP712Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}). 0xEssential removes the chainId from domainSeparator, instead including chainId as\\n * a bytes32 representation as the salt. This allows wallets to sign from any network, while still ensuring signatures\\n * can only be used on the target chain.\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EssentialEIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\");\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, address(this), bytes32(getChainId())));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    function getChainId() public view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x198be913374262f445fd8450ea2369c2017c63d1ceae9d7a05936324b3ae7b02\",\"license\":\"MIT\"},\"contracts/Libraries/fwd/EssentialForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./EssentialEIP712Base.sol\\\";\\nimport \\\"./SignedOwnershipProof.sol\\\";\\nimport \\\"./IForwardRequest.sol\\\";\\n\\n/// @title EssentialForwarder\\n/// @author 0xEssential\\n/// @notice EIP-2771 based MetaTransaction Forwarding Contract with EIP-3668 OffchainLookup for cross-chain token gating\\n/// @dev Allows a Relayer to submit meta-transactions that utilize an NFT (i.e. in a game) on behalf of EOAs. Transactions\\n///      are only executed if the Relayer provides a signature from a trusted signer. The signature must include the current\\n///      owner of the Layer 1 NFT being used, or a Burner EOA the owner has authorized to use its NFTs.\\n///\\n///      EssentialForwarder can be used to build Layer 2 games that use Layer 1 NFTs without bridging and with superior UX.\\n///      End users can specify a Burner EOA from their primary EOA, and then use that burner address to play games.\\n///      The Burner EOA can then sign messages for game moves without user interaction without any risk to the NFTs or other\\n///      assets owned by the primary EOA.\\ncontract EssentialForwarder is EssentialEIP712, AccessControl, SignedOwnershipProof {\\n    using ECDSA for bytes32;\\n\\n    event Session(address indexed owner, address indexed authorized, uint256 indexed length);\\n    error OffchainLookup(address sender, string[] urls, bytes callData, bytes4 callbackFunction, bytes extraData);\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    bytes32 private constant ERC721_TYPEHASH =\\n        keccak256(\\n            \\\"ForwardRequest(address to,address from,address authorizer,address nftContract,uint256 nonce,uint256 nftNonce,uint256 tokenId,bytes data)\\\"\\n        );\\n    mapping(address => uint256) internal _nonces;\\n    mapping(address => mapping(uint256 => uint256)) internal _tokenNonces;\\n\\n    string[] public urls;\\n\\n    constructor(string memory name, string[] memory _urls) EssentialEIP712(name, \\\"0.0.1\\\") {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n        _setOwnershipSigner(msg.sender);\\n        urls = _urls;\\n    }\\n\\n    /// @notice Change the ownership signer\\n    function setOwnershipSigner(address newSigner) external onlyRole(ADMIN_ROLE) {\\n        _setOwnershipSigner(newSigner);\\n    }\\n\\n    /// @notice Get current nonce for EOA\\n    function getNonce(address from) public view returns (uint256) {\\n        return _nonces[from];\\n    }\\n\\n    /// @notice Get current session for Primary EOA\\n    function getSession(address authorizer) public view returns (IForwardRequest.PlaySession memory) {\\n        return _sessions[authorizer];\\n    }\\n\\n    /// @notice Allow `authorized` to use your NFTs in a game for `length` seconds. Your NFTs\\n    ///         will not be held in custody or approved for transfer.\\n    function createSession(address authorized, uint256 length) external {\\n        _createSession(authorized, length);\\n    }\\n\\n    /// @notice Allow `authorized` to use your NFTs in a game for `length` seconds through a\\n    ///         signed message from the primary EOA\\n    /// @dev TODO\\n    // function createSignedSession(\\n    //     bytes calldata signature,\\n    //     address authorized,\\n    //     uint256 length,\\n    //     address sender\\n    // ) external onlyRole(ADMIN_ROLE) {\\n    //     bytes32 message = keccak256(abi.encode(sender, length)).toEthSignedMessageHash();\\n\\n    //     require(message.recover(signature) == sender, \\\"PlaySession signature invalid\\\");\\n    //     _createSession(authorized, length);\\n    // }\\n\\n    function _createSession(address authorized, uint256 length) internal {\\n        _sessions[msg.sender] = IForwardRequest.PlaySession({\\n            authorized: authorized,\\n            expiresAt: block.timestamp + length\\n        });\\n\\n        emit Session(msg.sender, authorized, length);\\n    }\\n\\n    /// @notice Stop allowing your current authorized burner address to use your NFTs.\\n    /// @dev For efficiency in PlaySession persistence and lookup, an EOA must authorize\\n    ///      itself\\n    function invalidateSession() external {\\n        this.createSession(msg.sender, type(uint256).max);\\n    }\\n\\n    /// @notice Submit a meta-tx request and signature to check validity and receive\\n    ///         a response with data useful for fetching a trusted proof per EIP-3668.\\n    /// @dev Per EIP-3668, a valid signature will cause a revert with useful error params.\\n    function preflight(IForwardRequest.ERC721ForwardRequest calldata req, bytes calldata signature) public view {\\n        // If the signature is valid for the request and state, the client will receive\\n        // the OffchainLookup error with parameters suitable for an https call to a JSON\\n        // RPC server.\\n\\n        if (verifyRequest(req, signature)) {\\n            revert OffchainLookup(\\n                address(this),\\n                urls,\\n                abi.encode(\\n                    req.from,\\n                    _nonces[req.from],\\n                    req.nftContract,\\n                    req.tokenId,\\n                    _tokenNonces[req.nftContract][req.tokenId]\\n                ),\\n                this.executeWithProof.selector,\\n                abi.encode(req, signature)\\n            );\\n        }\\n    }\\n\\n    /// @notice Re-submit a valid meta-tx request with trusted proof to execute the transaction.\\n    /// @dev The RPC call and re-submission should be handled by your Relayer client\\n    /// @param response The unaltered bytes reponse from a call made to an RPC based on OffchainLookup args\\n    /// @param extraData The unaltered bytes in the OffchainLookup extraData error arg\\n    function executeWithProof(bytes calldata response, bytes calldata extraData)\\n        external\\n        payable\\n        returns (bool, bytes memory)\\n    {\\n        (IForwardRequest.ERC721ForwardRequest memory req, bytes memory signature) = abi.decode(\\n            extraData,\\n            (IForwardRequest.ERC721ForwardRequest, bytes)\\n        );\\n\\n        // verifies\\n        require(verifyOwnershipProof(req, response), \\\"EssentialForwarder: ownership proof does not match request\\\");\\n        require(verifyRequest(req, signature), \\\"EssentialForwarder: signature does not match request\\\");\\n\\n        ++_nonces[req.from];\\n        ++_tokenNonces[req.nftContract][req.tokenId];\\n\\n        (bool success, bytes memory returndata) = req.to.call{gas: req.gas, value: 0}(\\n            // Implementation contracts must use EssentialERC2771Context.\\n            // The trusted NFT data is available via _msgNFT()\\n            abi.encodePacked(req.data, req.tokenId, req.nftContract, req.authorizer)\\n        );\\n\\n        // Validate that the relayer has sent enough gas for the call.\\n        // See https://ronan.eth.link/blog/ethereum-gas-dangers/\\n        assert(gasleft() > req.gas / 63);\\n\\n        return (success, returndata);\\n    }\\n\\n    /// @notice Submit a meta-tx request where a proof of ownership is not required.\\n    /// @dev Useful for transactions where the signer is not using a specific NFT, but values\\n    /// are still required in the signature - use the zero address for nftContract and 0 for tokenId\\n    function verify(IForwardRequest.ERC721ForwardRequest calldata req, bytes calldata signature)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return verifyRequest(req, signature);\\n    }\\n\\n    function execute(IForwardRequest.ERC721ForwardRequest calldata req, bytes calldata signature)\\n        public\\n        payable\\n        returns (bool, bytes memory)\\n    {\\n        require(verify(req, signature), \\\"MinimalForwarder: signature does not match request\\\");\\n        _nonces[req.from] = req.nonce + 1;\\n\\n        (bool success, bytes memory returndata) = req.to.call{gas: req.gas, value: req.value}(\\n            abi.encodePacked(req.data, uint256(0), address(0), req.authorizer)\\n        );\\n        // Validate that the relayer has sent enough gas for the call.\\n        // See https://ronan.eth.link/blog/ethereum-gas-dangers/\\n        assert(gasleft() > req.gas / 63);\\n\\n        return (success, returndata);\\n    }\\n\\n    function verifyRequest(IForwardRequest.ERC721ForwardRequest memory req, bytes memory signature)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        address signer = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    ERC721_TYPEHASH,\\n                    req.to,\\n                    req.from,\\n                    req.authorizer,\\n                    req.nftContract,\\n                    req.nonce,\\n                    // req.value,\\n                    // req.gas,\\n                    req.nftNonce,\\n                    req.tokenId,\\n                    keccak256(req.data)\\n                )\\n            )\\n        ).recover(signature);\\n        return _nonces[req.from] == req.nonce && signer == req.from;\\n    }\\n}\\n\",\"keccak256\":\"0xb53e7375d8bca1f84822f2a7710e7f44af17e4d02a6abee2a5883a26b52d4780\",\"license\":\"MIT\"},\"contracts/Libraries/fwd/IForwardRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IForwardRequest {\\n    struct ERC721ForwardRequest {\\n        address from; // Externally-owned account (EOA) signing the request.\\n        address authorizer; // Externally-owned account (EOA) that authorized from account in PlaySession.\\n        address to; // Destination address, normally a smart contract for an nFight game.\\n        address nftContract; // The ETH Mainnet address of the NFT contract for the token being used.\\n        uint256 nftNonce; // On-chain tracked nonce for the token being used.\\n        uint256 tokenId; // The tokenId of the ETH Mainnet NFT being used\\n        uint256 value; // Amount of ether to transfer to the destination.\\n        uint256 gas; // Amount of gas limit to set for the execution.\\n        uint256 nonce; // On-chain tracked nonce of a transaction.\\n        bytes data; // (Call)data to be sent to the destination.\\n    }\\n\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    struct PlaySession {\\n        address authorized; // Burner EOA that is authorized to play with NFTs by owner EOA.\\n        uint256 expiresAt; // block timestamp when the session is invalidated.\\n    }\\n}\\n\",\"keccak256\":\"0x82d7763d6452e961fe0db3a9fb9ab520c58a68ab22319481efd192c59d3b2723\",\"license\":\"MIT\"},\"contracts/Libraries/fwd/SignedOwnershipProof.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./IForwardRequest.sol\\\";\\n\\n/// @title SignedOwnershipProof\\n/// @author Sammy Bauch\\n/// @dev Based on SignedAllowance by Simon Fremaux (@dievardump)\\n/// see https://github.com/dievardump/signed-minting\\n\\ncontract SignedOwnershipProof {\\n    using ECDSA for bytes32;\\n\\n    // address used to sign proof of ownership\\n    address private _ownershipSigner;\\n\\n    mapping(address => IForwardRequest.PlaySession) internal _sessions;\\n\\n    /// @notice Construct message that _ownershipSigner must sign as ownership proof\\n    /// @dev The RPC server uses this view function to create the ownership proof\\n    /// @param nftOwner the address that currently owns the L1 NFT\\n    /// @param nonce the meta-transaction nonce for account\\n    /// @param nftContract the mainnet contract address for the NFT being utilized\\n    /// @param tokenId the tokenId from nftContract for the NFT being utilized\\n    /// @return the message _ownershipSigner should sign\\n    function createMessage(\\n        address nftOwner,\\n        uint256 nonce,\\n        address nftContract,\\n        uint256 tokenId,\\n        uint256 tokenNonce\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encode(nftOwner, nonce, nftContract, tokenId, tokenNonce));\\n    }\\n\\n    /// @notice Verify signed OffchainLookup proof against meta-tx request data\\n    /// @dev Ensures that _ownershipSigner signed a message containing (nftOwner OR authorized address, nonce, nftContract, tokenId)\\n    /// @param req structured data submitted by EOA making a meta-transaction request\\n    /// @param signature the signature proof created by the ownership signer EOA\\n    function verifyOwnershipProof(IForwardRequest.ERC721ForwardRequest memory req, bytes memory signature)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        // Verifies that ownership proof signature is signed by _ownerShip signer\\n        // and that the embedded owner has authorized req.from\\n        //\\n        // Separately we must verify that the meta-tx signature also matches req.from\\n        // and is signed by the EOA making the meta-transaction request.\\n\\n        IForwardRequest.PlaySession memory ps = _sessions[req.authorizer];\\n        require(block.timestamp < ps.expiresAt, \\\"Session Expired\\\");\\n        require(ps.authorized == req.from, \\\"Signer not authorized\\\");\\n\\n        bytes32 message = createMessage(req.authorizer, req.nonce, req.nftContract, req.tokenId, req.nftNonce)\\n            .toEthSignedMessageHash();\\n\\n        return message.recover(signature) == _ownershipSigner;\\n    }\\n\\n    /// @notice Get ownershipSigner address\\n    /// @return the ownership proof signer address\\n    function ownershipSigner() public view returns (address) {\\n        return _ownershipSigner;\\n    }\\n\\n    /// @dev This signer should hold no assets and is only used for signing L1 ownership proofs.\\n    /// @param newSigner the new signer's public address\\n    function _setOwnershipSigner(address newSigner) internal {\\n        _ownershipSigner = newSigner;\\n    }\\n}\\n\",\"keccak256\":\"0x1786bed31209cc74b2cb05ccccfafc3bd058ca90e161dc017c72f5da37854065\",\"license\":\"MIT\"},\"contracts/NFightGasStation/NFightGasStation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\nimport \\\"../Libraries/fwd/EssentialForwarder.sol\\\";\\n\\ncontract NFightGasStation is EssentialForwarder {\\n    constructor(string[] memory urls) EssentialForwarder(\\\"NFightGasStation\\\", urls) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x312da09a5962caec7bd34b48c3fdc0c09736e360c363b7cc536ba1db34fbfd69\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b506040516200281b3803806200281b8339810160408190526200003591620003ff565b604080518082018252601081526f272334b3b43a23b0b9a9ba30ba34b7b760811b6020808301918252835180850185526005815264302e302e3160d81b90820152825190912060c08181527fae209a0b48f21c054280f2455d32cf309387644879d9acbd8ffc19916381188560e08190524660a081815287517f36c25de3e541d5d970f66e4210d728721220fff5c077cc6cd008b3a0c62adab7818801819052818a01969096526060810193909352306080808501919091528382019290925287518084039091018152919092019095528451949092019390932090526101009190915281620001276000336200019d565b62000142600080516020620027fb833981519152336200019d565b600180546001600160a01b031916331790558051620001699060059060208401906200024d565b506200017b915060009050336200019d565b62000196600080516020620027fb833981519152336200019d565b5062000588565b620001a98282620001ad565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620001a9576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002093390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b8280548282559060005260206000209081019282156200029f579160200282015b828111156200029f57825180516200028e918491602090910190620002b1565b50916020019190600101906200026e565b50620002ad9291506200033c565b5090565b828054620002bf906200054b565b90600052602060002090601f016020900481019282620002e357600085556200032e565b82601f10620002fe57805160ff19168380011785556200032e565b828001600101855582156200032e579182015b828111156200032e57825182559160200191906001019062000311565b50620002ad9291506200035d565b80821115620002ad57600062000353828262000374565b506001016200033c565b5b80821115620002ad57600081556001016200035e565b50805462000382906200054b565b6000825580601f1062000393575050565b601f016020900490600052602060002090810190620003b391906200035d565b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620003f757620003f7620003b6565b604052919050565b600060208083850312156200041357600080fd5b82516001600160401b03808211156200042b57600080fd5b8185019150601f86818401126200044157600080fd5b825182811115620004565762000456620003b6565b8060051b62000467868201620003cc565b918252848101860191868101908a8411156200048257600080fd5b87870192505b838310156200053d57825186811115620004a25760008081fd5b8701603f81018c13620004b55760008081fd5b8881015187811115620004cc57620004cc620003b6565b620004df818801601f19168b01620003cc565b81815260408e81848601011115620004f75760008081fd5b60005b8381101562000517578481018201518382018e01528c01620004fa565b83811115620005295760008d85850101525b505084525050918701919087019062000488565b9a9950505050505050505050565b600181811c908216806200056057607f821691505b602082108114156200058257634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516101005161222e620005cd6000396000611673015260006116c20152600061169d015260006116210152600061164a015261222e6000f3fe6080604052600436106101355760003560e01c806384bb5a43116100ab578063a217fddf1161006f578063a217fddf1461040a578063be0fb87e1461041f578063d547741f14610434578063dbf0eeef14610454578063f2cde3ef14610467578063ffb703ee1461048757600080fd5b806384bb5a43146103025780638c8e13b9146103225780638e9a75d2146103aa57806391d14854146103ca5780639ddd61d6146103ea57600080fd5b80633408e470116100fd5780633408e4701461022d57806336568abe146102405780634d20796c14610260578063745125fc1461028157806375b238fc146102a1578063796676be146102d557600080fd5b806301ffc9a71461013a57806312ce42fd1461016f578063248a9ca3146101975780632d0335ab146101d55780632f2ff15d1461020b575b600080fd5b34801561014657600080fd5b5061015a610155366004611829565b6104a7565b60405190151581526020015b60405180910390f35b34801561017b57600080fd5b506001546040516001600160a01b039091168152602001610166565b3480156101a357600080fd5b506101c76101b2366004611853565b60009081526020819052604090206001015490565b604051908152602001610166565b3480156101e157600080fd5b506101c76101f0366004611888565b6001600160a01b031660009081526003602052604090205490565b34801561021757600080fd5b5061022b6102263660046118a3565b6104de565b005b34801561023957600080fd5b50466101c7565b34801561024c57600080fd5b5061022b61025b3660046118a3565b610509565b61027361026e366004611911565b61058c565b6040516101669291906119db565b34801561028d57600080fd5b5061022b61029c366004611911565b610734565b3480156102ad57600080fd5b506101c77fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b3480156102e157600080fd5b506102f56102f0366004611853565b610893565b60405161016691906119f6565b34801561030e57600080fd5b5061015a61031d366004611911565b61093f565b34801561032e57600080fd5b5061038661033d366004611888565b604080518082018252600080825260209182018190526001600160a01b039384168152600282528290208251808401909352805490931682526001909201549181019190915290565b6040805182516001600160a01b031681526020928301519281019290925201610166565b3480156103b657600080fd5b5061015a6103c5366004611b99565b610991565b3480156103d657600080fd5b5061015a6103e53660046118a3565b610b08565b3480156103f657600080fd5b506101c7610405366004611bfd565b610b31565b34801561041657600080fd5b506101c7600081565b34801561042b57600080fd5b5061022b610b88565b34801561044057600080fd5b5061022b61044f3660046118a3565b610be5565b610273610462366004611c4b565b610c0b565b34801561047357600080fd5b5061022b610482366004611888565b610e83565b34801561049357600080fd5b5061022b6104a2366004611cb7565b610ecd565b60006001600160e01b03198216637965db0b60e01b14806104d857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152602081905260409020600101546104fa8133610ed7565b6105048383610f3b565b505050565b6001600160a01b038116331461057e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6105888282610fbf565b5050565b6000606061059b85858561093f565b6106025760405162461bcd60e51b815260206004820152603260248201527f4d696e696d616c466f727761726465723a207369676e617475726520646f6573604482015271081b9bdd081b585d18da081c995c5d595cdd60721b6064820152608401610575565b6106126101008601356001611cf7565b600360006106236020890189611888565b6001600160a01b03166001600160a01b031681526020019081526020016000208190555060008086604001602081019061065d9190611888565b6001600160a01b031660e088013560c089013561067e6101208b018b611d0f565b6000808d60200160208101906106949190611888565b6040516020016106a8959493929190611d56565b60408051601f19818403018152908290526106c291611d8e565b600060405180830381858888f193505050503d8060008114610700576040519150601f19603f3d011682016040523d82523d6000602084013e610705565b606091505b50909250905061071a603f60e0890135611daa565b5a1161072857610728611dcc565b90969095509350505050565b61077c61074084611de2565b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061102492505050565b15610504573060056107916020860186611888565b600360006107a26020890189611888565b6001600160a01b031681526020810191909152604001600020546107cc6080880160608901611888565b60a0880135600460006107e560808c0160608d01611888565b6001600160a01b0390811682526020808301939093526040918201600090812060a08e8101358352908552908390205483519883169489019490945291870195909552929093166060850152608084015282015260c00160405160208183030381529060405263dbf0eeef60e01b86868660405160200161086893929190611e5d565b60408051601f1981840301815290829052630556f18360e41b82526105759594939291600401611f89565b600581815481106108a357600080fd5b9060005260206000200160009150905080546108be90611f4e565b80601f01602080910402602001604051908101604052809291908181526020018280546108ea90611f4e565b80156109375780601f1061090c57610100808354040283529160200191610937565b820191906000526020600020905b81548152906001019060200180831161091a57829003601f168201915b505050505081565b600061098961094d85611de2565b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061102492505050565b949350505050565b6020808301516001600160a01b039081166000908152600283526040808220815180830190925280549093168152600190920154928201839052914210610a0c5760405162461bcd60e51b815260206004820152600f60248201526e14d95cdcda5bdb88115e1c1a5c9959608a1b6044820152606401610575565b835181516001600160a01b03908116911614610a625760405162461bcd60e51b815260206004820152601560248201527414da59db995c881b9bdd08185d5d1a1bdc9a5e9959605a1b6044820152606401610575565b6000610adc610a89866020015187610100015188606001518960a001518a60800151610b31565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b6001549091506001600160a01b0316610af58286611148565b6001600160a01b03161495945050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b604080516001600160a01b03808816602083015291810186905290841660608201526080810183905260a0810182905260009060c00160405160208183030381529060405280519060200120905095945050505050565b604051600162247e0960e11b031981523360048201526000196024820152309063ffb703ee90604401600060405180830381600087803b158015610bcb57600080fd5b505af1158015610bdf573d6000803e3d6000fd5b50505050565b600082815260208190526040902060010154610c018133610ed7565b6105048383610fbf565b600060608180610c1d85870187611b99565b91509150610c618289898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061099192505050565b610cd35760405162461bcd60e51b815260206004820152603a60248201527f457373656e7469616c466f727761726465723a206f776e65727368697020707260448201527f6f6f6620646f6573206e6f74206d6174636820726571756573740000000000006064820152608401610575565b610cdd8282611024565b610d465760405162461bcd60e51b815260206004820152603460248201527f457373656e7469616c466f727761726465723a207369676e617475726520646f604482015273195cc81b9bdd081b585d18da081c995c5d595cdd60621b6064820152608401610575565b81516001600160a01b031660009081526003602052604081208054909190610d6d906120c2565b9091555060608201516001600160a01b0316600090815260046020908152604080832060a0860151845290915281208054909190610daa906120c2565b9190508190555060008083604001516001600160a01b03168460e0015160008661012001518760a0015188606001518960200151604051602001610df194939291906120dd565b60408051601f1981840301815290829052610e0b91611d8e565b600060405180830381858888f193505050503d8060008114610e49576040519150601f19603f3d011682016040523d82523d6000602084013e610e4e565b606091505b5091509150603f8460e00151610e649190611daa565b5a11610e7257610e72611dcc565b909450925050505b94509492505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610eae8133610ed7565b600180546001600160a01b0319166001600160a01b0384161790555050565b610588828261116c565b610ee18282610b08565b61058857610ef9816001600160a01b031660146111fe565b610f048360206111fe565b604051602001610f15929190612121565b60408051601f198184030181529082905262461bcd60e51b8252610575916004016119f6565b610f458282610b08565b610588576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610f7b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610fc98282610b08565b15610588576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080611105836110ff7fe9020ed6f4388239f345839ee2632ab28a7fc970b20ed7d68dc51ca3e401e8918760400151886000015189602001518a606001518b61010001518c608001518d60a001518e6101200151805190602001206040516020016110e4999897969594939291909889526001600160a01b0397881660208a01529587166040890152938616606088015291909416608086015260a085019390935260c084019290925260e08301919091526101008201526101200190565b604051602081830303815290604052805190602001206113a1565b90611148565b61010085015185516001600160a01b0316600090815260036020526040902054919250148015610989575083516001600160a01b03828116911614949350505050565b600080600061115785856113ef565b915091506111648161145f565b509392505050565b6040518060400160405280836001600160a01b0316815260200182426111929190611cf7565b9052336000818152600260209081526040808320855181546001600160a01b0319166001600160a01b039182161782559590920151600190920191909155518493861692917f1170e4b3e143a792ce7a7af268ecfe7d7b0574438d8040eb89c2bf5b7e6e15d891a45050565b6060600061120d836002612196565b611218906002611cf7565b67ffffffffffffffff81111561123057611230611a09565b6040519080825280601f01601f19166020018201604052801561125a576020820181803683370190505b509050600360fc1b81600081518110611275576112756121b5565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106112a4576112a46121b5565b60200101906001600160f81b031916908160001a90535060006112c8846002612196565b6112d3906001611cf7565b90505b600181111561134b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611307576113076121b5565b1a60f81b82828151811061131d5761131d6121b5565b60200101906001600160f81b031916908160001a90535060049490941c93611344816121cb565b90506112d6565b50831561139a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610575565b9392505050565b60006104d86113ae61161d565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000808251604114156114265760208301516040840151606085015160001a61141a87828585611710565b94509450505050611458565b82516040141561145057602083015160408401516114458683836117fa565b935093505050611458565b506000905060025b9250929050565b6000816004811115611473576114736121e2565b141561147c5750565b6001816004811115611490576114906121e2565b14156114de5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610575565b60028160048111156114f2576114f26121e2565b14156115405760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610575565b6003816004811115611554576115546121e2565b14156115ad5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610575565b60048160048111156115c1576115c16121e2565b141561161a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610575565b50565b60007f000000000000000000000000000000000000000000000000000000000000000046141561166c57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301523060808301524660a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156117475750600090506003610e7a565b8460ff16601b1415801561175f57508460ff16601c14155b156117705750600090506004610e7a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156117c4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166117ed57600060019250925050610e7a565b9660009650945050505050565b6000806001600160ff1b03831660ff84901c601b0161181b87828885611710565b935093505050935093915050565b60006020828403121561183b57600080fd5b81356001600160e01b03198116811461139a57600080fd5b60006020828403121561186557600080fd5b5035919050565b80356001600160a01b038116811461188357600080fd5b919050565b60006020828403121561189a57600080fd5b61139a8261186c565b600080604083850312156118b657600080fd5b823591506118c66020840161186c565b90509250929050565b60008083601f8401126118e157600080fd5b50813567ffffffffffffffff8111156118f957600080fd5b60208301915083602082850101111561145857600080fd5b60008060006040848603121561192657600080fd5b833567ffffffffffffffff8082111561193e57600080fd5b90850190610140828803121561195357600080fd5b9093506020850135908082111561196957600080fd5b50611976868287016118cf565b9497909650939450505050565b60005b8381101561199e578181015183820152602001611986565b83811115610bdf5750506000910152565b600081518084526119c7816020860160208601611983565b601f01601f19169290920160200192915050565b821515815260406020820152600061098960408301846119af565b60208152600061139a60208301846119af565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715611a4357611a43611a09565b60405290565b600082601f830112611a5a57600080fd5b813567ffffffffffffffff80821115611a7557611a75611a09565b604051601f8301601f19908116603f01168101908282118183101715611a9d57611a9d611a09565b81604052838152866020858801011115611ab657600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006101408284031215611ae957600080fd5b611af1611a1f565b9050611afc8261186c565b8152611b0a6020830161186c565b6020820152611b1b6040830161186c565b6040820152611b2c6060830161186c565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013567ffffffffffffffff811115611b8157600080fd5b611b8d85828601611a49565b82840152505092915050565b60008060408385031215611bac57600080fd5b823567ffffffffffffffff80821115611bc457600080fd5b611bd086838701611ad6565b93506020850135915080821115611be657600080fd5b50611bf385828601611a49565b9150509250929050565b600080600080600060a08688031215611c1557600080fd5b611c1e8661186c565b945060208601359350611c336040870161186c565b94979396509394606081013594506080013592915050565b60008060008060408587031215611c6157600080fd5b843567ffffffffffffffff80821115611c7957600080fd5b611c85888389016118cf565b90965094506020870135915080821115611c9e57600080fd5b50611cab878288016118cf565b95989497509550505050565b60008060408385031215611cca57600080fd5b611cd38361186c565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611d0a57611d0a611ce1565b500190565b6000808335601e19843603018112611d2657600080fd5b83018035915067ffffffffffffffff821115611d4157600080fd5b60200191503681900382131561145857600080fd5b84868237909301918252606090811b6bffffffffffffffffffffffff19908116602084015292901b9091166034820152604801919050565b60008251611da0818460208701611983565b9190910192915050565b600082611dc757634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052600160045260246000fd5b60006104d83683611ad6565b6000808335601e19843603018112611e0557600080fd5b830160208101925035905067ffffffffffffffff811115611e2557600080fd5b80360383131561145857600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152611e7e60408201611e718661186c565b6001600160a01b03169052565b6000611e8c6020860161186c565b6001600160a01b03166060830152611ea66040860161186c565b6001600160a01b03166080830152611ec06060860161186c565b6001600160a01b03811660a084015250608085013560c083015260a085013560e083015261010060c08601358184015261012060e0870135818501526101408288013581860152611f1382890189611dee565b935091508061016086015250611f2e61018085018383611e34565b9150508281036020840152611f44818587611e34565b9695505050505050565b600181811c90821680611f6257607f821691505b60208210811415611f8357634e487b7160e01b600052602260045260246000fd5b50919050565b600060a0820160018060a01b0388168352602060a08185015281885480845260c08601915060c08160051b870101935060008a8152838120815b8381101561207a5788870360bf1901855281548390600181811c9080831680611fed57607f831692505b8a831081141561200b57634e487b7160e01b88526022600452602488fd5b828c5260208c01818015612026576001811461203757612061565b60ff19861682528c82019650612061565b6000898152602090208a5b8681101561205b57815484820152908501908e01612042565b83019750505b50949b5050978901979490940193505050600101611fc3565b505050505050828103604084015261209281876119af565b6001600160e01b031986166060850152905082810360808401526120b681856119af565b98975050505050505050565b60006000198214156120d6576120d6611ce1565b5060010190565b600085516120ef818460208a01611983565b91909101938452506bffffffffffffffffffffffff19606092831b81166020850152911b166034820152604801919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612159816017850160208801611983565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161218a816028840160208801611983565b01602801949350505050565b60008160001904831182151516156121b0576121b0611ce1565b500290565b634e487b7160e01b600052603260045260246000fd5b6000816121da576121da611ce1565b506000190190565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220d28dcd3886c61005a8bf304201b286be8e68e395ed025a754ce7b429778f94d864736f6c63430008090033a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c806384bb5a43116100ab578063a217fddf1161006f578063a217fddf1461040a578063be0fb87e1461041f578063d547741f14610434578063dbf0eeef14610454578063f2cde3ef14610467578063ffb703ee1461048757600080fd5b806384bb5a43146103025780638c8e13b9146103225780638e9a75d2146103aa57806391d14854146103ca5780639ddd61d6146103ea57600080fd5b80633408e470116100fd5780633408e4701461022d57806336568abe146102405780634d20796c14610260578063745125fc1461028157806375b238fc146102a1578063796676be146102d557600080fd5b806301ffc9a71461013a57806312ce42fd1461016f578063248a9ca3146101975780632d0335ab146101d55780632f2ff15d1461020b575b600080fd5b34801561014657600080fd5b5061015a610155366004611829565b6104a7565b60405190151581526020015b60405180910390f35b34801561017b57600080fd5b506001546040516001600160a01b039091168152602001610166565b3480156101a357600080fd5b506101c76101b2366004611853565b60009081526020819052604090206001015490565b604051908152602001610166565b3480156101e157600080fd5b506101c76101f0366004611888565b6001600160a01b031660009081526003602052604090205490565b34801561021757600080fd5b5061022b6102263660046118a3565b6104de565b005b34801561023957600080fd5b50466101c7565b34801561024c57600080fd5b5061022b61025b3660046118a3565b610509565b61027361026e366004611911565b61058c565b6040516101669291906119db565b34801561028d57600080fd5b5061022b61029c366004611911565b610734565b3480156102ad57600080fd5b506101c77fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b3480156102e157600080fd5b506102f56102f0366004611853565b610893565b60405161016691906119f6565b34801561030e57600080fd5b5061015a61031d366004611911565b61093f565b34801561032e57600080fd5b5061038661033d366004611888565b604080518082018252600080825260209182018190526001600160a01b039384168152600282528290208251808401909352805490931682526001909201549181019190915290565b6040805182516001600160a01b031681526020928301519281019290925201610166565b3480156103b657600080fd5b5061015a6103c5366004611b99565b610991565b3480156103d657600080fd5b5061015a6103e53660046118a3565b610b08565b3480156103f657600080fd5b506101c7610405366004611bfd565b610b31565b34801561041657600080fd5b506101c7600081565b34801561042b57600080fd5b5061022b610b88565b34801561044057600080fd5b5061022b61044f3660046118a3565b610be5565b610273610462366004611c4b565b610c0b565b34801561047357600080fd5b5061022b610482366004611888565b610e83565b34801561049357600080fd5b5061022b6104a2366004611cb7565b610ecd565b60006001600160e01b03198216637965db0b60e01b14806104d857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152602081905260409020600101546104fa8133610ed7565b6105048383610f3b565b505050565b6001600160a01b038116331461057e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6105888282610fbf565b5050565b6000606061059b85858561093f565b6106025760405162461bcd60e51b815260206004820152603260248201527f4d696e696d616c466f727761726465723a207369676e617475726520646f6573604482015271081b9bdd081b585d18da081c995c5d595cdd60721b6064820152608401610575565b6106126101008601356001611cf7565b600360006106236020890189611888565b6001600160a01b03166001600160a01b031681526020019081526020016000208190555060008086604001602081019061065d9190611888565b6001600160a01b031660e088013560c089013561067e6101208b018b611d0f565b6000808d60200160208101906106949190611888565b6040516020016106a8959493929190611d56565b60408051601f19818403018152908290526106c291611d8e565b600060405180830381858888f193505050503d8060008114610700576040519150601f19603f3d011682016040523d82523d6000602084013e610705565b606091505b50909250905061071a603f60e0890135611daa565b5a1161072857610728611dcc565b90969095509350505050565b61077c61074084611de2565b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061102492505050565b15610504573060056107916020860186611888565b600360006107a26020890189611888565b6001600160a01b031681526020810191909152604001600020546107cc6080880160608901611888565b60a0880135600460006107e560808c0160608d01611888565b6001600160a01b0390811682526020808301939093526040918201600090812060a08e8101358352908552908390205483519883169489019490945291870195909552929093166060850152608084015282015260c00160405160208183030381529060405263dbf0eeef60e01b86868660405160200161086893929190611e5d565b60408051601f1981840301815290829052630556f18360e41b82526105759594939291600401611f89565b600581815481106108a357600080fd5b9060005260206000200160009150905080546108be90611f4e565b80601f01602080910402602001604051908101604052809291908181526020018280546108ea90611f4e565b80156109375780601f1061090c57610100808354040283529160200191610937565b820191906000526020600020905b81548152906001019060200180831161091a57829003601f168201915b505050505081565b600061098961094d85611de2565b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061102492505050565b949350505050565b6020808301516001600160a01b039081166000908152600283526040808220815180830190925280549093168152600190920154928201839052914210610a0c5760405162461bcd60e51b815260206004820152600f60248201526e14d95cdcda5bdb88115e1c1a5c9959608a1b6044820152606401610575565b835181516001600160a01b03908116911614610a625760405162461bcd60e51b815260206004820152601560248201527414da59db995c881b9bdd08185d5d1a1bdc9a5e9959605a1b6044820152606401610575565b6000610adc610a89866020015187610100015188606001518960a001518a60800151610b31565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b6001549091506001600160a01b0316610af58286611148565b6001600160a01b03161495945050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b604080516001600160a01b03808816602083015291810186905290841660608201526080810183905260a0810182905260009060c00160405160208183030381529060405280519060200120905095945050505050565b604051600162247e0960e11b031981523360048201526000196024820152309063ffb703ee90604401600060405180830381600087803b158015610bcb57600080fd5b505af1158015610bdf573d6000803e3d6000fd5b50505050565b600082815260208190526040902060010154610c018133610ed7565b6105048383610fbf565b600060608180610c1d85870187611b99565b91509150610c618289898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061099192505050565b610cd35760405162461bcd60e51b815260206004820152603a60248201527f457373656e7469616c466f727761726465723a206f776e65727368697020707260448201527f6f6f6620646f6573206e6f74206d6174636820726571756573740000000000006064820152608401610575565b610cdd8282611024565b610d465760405162461bcd60e51b815260206004820152603460248201527f457373656e7469616c466f727761726465723a207369676e617475726520646f604482015273195cc81b9bdd081b585d18da081c995c5d595cdd60621b6064820152608401610575565b81516001600160a01b031660009081526003602052604081208054909190610d6d906120c2565b9091555060608201516001600160a01b0316600090815260046020908152604080832060a0860151845290915281208054909190610daa906120c2565b9190508190555060008083604001516001600160a01b03168460e0015160008661012001518760a0015188606001518960200151604051602001610df194939291906120dd565b60408051601f1981840301815290829052610e0b91611d8e565b600060405180830381858888f193505050503d8060008114610e49576040519150601f19603f3d011682016040523d82523d6000602084013e610e4e565b606091505b5091509150603f8460e00151610e649190611daa565b5a11610e7257610e72611dcc565b909450925050505b94509492505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610eae8133610ed7565b600180546001600160a01b0319166001600160a01b0384161790555050565b610588828261116c565b610ee18282610b08565b61058857610ef9816001600160a01b031660146111fe565b610f048360206111fe565b604051602001610f15929190612121565b60408051601f198184030181529082905262461bcd60e51b8252610575916004016119f6565b610f458282610b08565b610588576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610f7b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610fc98282610b08565b15610588576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080611105836110ff7fe9020ed6f4388239f345839ee2632ab28a7fc970b20ed7d68dc51ca3e401e8918760400151886000015189602001518a606001518b61010001518c608001518d60a001518e6101200151805190602001206040516020016110e4999897969594939291909889526001600160a01b0397881660208a01529587166040890152938616606088015291909416608086015260a085019390935260c084019290925260e08301919091526101008201526101200190565b604051602081830303815290604052805190602001206113a1565b90611148565b61010085015185516001600160a01b0316600090815260036020526040902054919250148015610989575083516001600160a01b03828116911614949350505050565b600080600061115785856113ef565b915091506111648161145f565b509392505050565b6040518060400160405280836001600160a01b0316815260200182426111929190611cf7565b9052336000818152600260209081526040808320855181546001600160a01b0319166001600160a01b039182161782559590920151600190920191909155518493861692917f1170e4b3e143a792ce7a7af268ecfe7d7b0574438d8040eb89c2bf5b7e6e15d891a45050565b6060600061120d836002612196565b611218906002611cf7565b67ffffffffffffffff81111561123057611230611a09565b6040519080825280601f01601f19166020018201604052801561125a576020820181803683370190505b509050600360fc1b81600081518110611275576112756121b5565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106112a4576112a46121b5565b60200101906001600160f81b031916908160001a90535060006112c8846002612196565b6112d3906001611cf7565b90505b600181111561134b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611307576113076121b5565b1a60f81b82828151811061131d5761131d6121b5565b60200101906001600160f81b031916908160001a90535060049490941c93611344816121cb565b90506112d6565b50831561139a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610575565b9392505050565b60006104d86113ae61161d565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000808251604114156114265760208301516040840151606085015160001a61141a87828585611710565b94509450505050611458565b82516040141561145057602083015160408401516114458683836117fa565b935093505050611458565b506000905060025b9250929050565b6000816004811115611473576114736121e2565b141561147c5750565b6001816004811115611490576114906121e2565b14156114de5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610575565b60028160048111156114f2576114f26121e2565b14156115405760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610575565b6003816004811115611554576115546121e2565b14156115ad5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610575565b60048160048111156115c1576115c16121e2565b141561161a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610575565b50565b60007f000000000000000000000000000000000000000000000000000000000000000046141561166c57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301523060808301524660a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156117475750600090506003610e7a565b8460ff16601b1415801561175f57508460ff16601c14155b156117705750600090506004610e7a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156117c4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166117ed57600060019250925050610e7a565b9660009650945050505050565b6000806001600160ff1b03831660ff84901c601b0161181b87828885611710565b935093505050935093915050565b60006020828403121561183b57600080fd5b81356001600160e01b03198116811461139a57600080fd5b60006020828403121561186557600080fd5b5035919050565b80356001600160a01b038116811461188357600080fd5b919050565b60006020828403121561189a57600080fd5b61139a8261186c565b600080604083850312156118b657600080fd5b823591506118c66020840161186c565b90509250929050565b60008083601f8401126118e157600080fd5b50813567ffffffffffffffff8111156118f957600080fd5b60208301915083602082850101111561145857600080fd5b60008060006040848603121561192657600080fd5b833567ffffffffffffffff8082111561193e57600080fd5b90850190610140828803121561195357600080fd5b9093506020850135908082111561196957600080fd5b50611976868287016118cf565b9497909650939450505050565b60005b8381101561199e578181015183820152602001611986565b83811115610bdf5750506000910152565b600081518084526119c7816020860160208601611983565b601f01601f19169290920160200192915050565b821515815260406020820152600061098960408301846119af565b60208152600061139a60208301846119af565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715611a4357611a43611a09565b60405290565b600082601f830112611a5a57600080fd5b813567ffffffffffffffff80821115611a7557611a75611a09565b604051601f8301601f19908116603f01168101908282118183101715611a9d57611a9d611a09565b81604052838152866020858801011115611ab657600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006101408284031215611ae957600080fd5b611af1611a1f565b9050611afc8261186c565b8152611b0a6020830161186c565b6020820152611b1b6040830161186c565b6040820152611b2c6060830161186c565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013567ffffffffffffffff811115611b8157600080fd5b611b8d85828601611a49565b82840152505092915050565b60008060408385031215611bac57600080fd5b823567ffffffffffffffff80821115611bc457600080fd5b611bd086838701611ad6565b93506020850135915080821115611be657600080fd5b50611bf385828601611a49565b9150509250929050565b600080600080600060a08688031215611c1557600080fd5b611c1e8661186c565b945060208601359350611c336040870161186c565b94979396509394606081013594506080013592915050565b60008060008060408587031215611c6157600080fd5b843567ffffffffffffffff80821115611c7957600080fd5b611c85888389016118cf565b90965094506020870135915080821115611c9e57600080fd5b50611cab878288016118cf565b95989497509550505050565b60008060408385031215611cca57600080fd5b611cd38361186c565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611d0a57611d0a611ce1565b500190565b6000808335601e19843603018112611d2657600080fd5b83018035915067ffffffffffffffff821115611d4157600080fd5b60200191503681900382131561145857600080fd5b84868237909301918252606090811b6bffffffffffffffffffffffff19908116602084015292901b9091166034820152604801919050565b60008251611da0818460208701611983565b9190910192915050565b600082611dc757634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052600160045260246000fd5b60006104d83683611ad6565b6000808335601e19843603018112611e0557600080fd5b830160208101925035905067ffffffffffffffff811115611e2557600080fd5b80360383131561145857600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152611e7e60408201611e718661186c565b6001600160a01b03169052565b6000611e8c6020860161186c565b6001600160a01b03166060830152611ea66040860161186c565b6001600160a01b03166080830152611ec06060860161186c565b6001600160a01b03811660a084015250608085013560c083015260a085013560e083015261010060c08601358184015261012060e0870135818501526101408288013581860152611f1382890189611dee565b935091508061016086015250611f2e61018085018383611e34565b9150508281036020840152611f44818587611e34565b9695505050505050565b600181811c90821680611f6257607f821691505b60208210811415611f8357634e487b7160e01b600052602260045260246000fd5b50919050565b600060a0820160018060a01b0388168352602060a08185015281885480845260c08601915060c08160051b870101935060008a8152838120815b8381101561207a5788870360bf1901855281548390600181811c9080831680611fed57607f831692505b8a831081141561200b57634e487b7160e01b88526022600452602488fd5b828c5260208c01818015612026576001811461203757612061565b60ff19861682528c82019650612061565b6000898152602090208a5b8681101561205b57815484820152908501908e01612042565b83019750505b50949b5050978901979490940193505050600101611fc3565b505050505050828103604084015261209281876119af565b6001600160e01b031986166060850152905082810360808401526120b681856119af565b98975050505050505050565b60006000198214156120d6576120d6611ce1565b5060010190565b600085516120ef818460208a01611983565b91909101938452506bffffffffffffffffffffffff19606092831b81166020850152911b166034820152604801919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612159816017850160208801611983565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161218a816028840160208801611983565b01602801949350505050565b60008160001904831182151516156121b0576121b0611ce1565b500290565b634e487b7160e01b600052603260045260246000fd5b6000816121da576121da611ce1565b506000190190565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220d28dcd3886c61005a8bf304201b286be8e68e395ed025a754ce7b429778f94d864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createMessage(address,uint256,address,uint256,uint256)": {
        "details": "The RPC server uses this view function to create the ownership proof",
        "params": {
          "nftContract": "the mainnet contract address for the NFT being utilized",
          "nftOwner": "the address that currently owns the L1 NFT",
          "nonce": "the meta-transaction nonce for account",
          "tokenId": "the tokenId from nftContract for the NFT being utilized"
        },
        "returns": {
          "_0": "the message _ownershipSigner should sign"
        }
      },
      "executeWithProof(bytes,bytes)": {
        "details": "The RPC call and re-submission should be handled by your Relayer client",
        "params": {
          "extraData": "The unaltered bytes in the OffchainLookup extraData error arg",
          "response": "The unaltered bytes reponse from a call made to an RPC based on OffchainLookup args"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "invalidateSession()": {
        "details": "For efficiency in PlaySession persistence and lookup, an EOA must authorize      itself"
      },
      "ownershipSigner()": {
        "returns": {
          "_0": "the ownership proof signer address"
        }
      },
      "preflight((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)": {
        "details": "Per EIP-3668, a valid signature will cause a revert with useful error params."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "verify((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)": {
        "details": "Useful for transactions where the signer is not using a specific NFT, but values are still required in the signature - use the zero address for nftContract and 0 for tokenId"
      },
      "verifyOwnershipProof((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)": {
        "details": "Ensures that _ownershipSigner signed a message containing (nftOwner OR authorized address, nonce, nftContract, tokenId)",
        "params": {
          "req": "structured data submitted by EOA making a meta-transaction request",
          "signature": "the signature proof created by the ownership signer EOA"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createMessage(address,uint256,address,uint256,uint256)": {
        "notice": "Construct message that _ownershipSigner must sign as ownership proof"
      },
      "createSession(address,uint256)": {
        "notice": "Allow `authorized` to use your NFTs in a game for `length` seconds. Your NFTs         will not be held in custody or approved for transfer."
      },
      "executeWithProof(bytes,bytes)": {
        "notice": "Re-submit a valid meta-tx request with trusted proof to execute the transaction."
      },
      "getNonce(address)": {
        "notice": "Get current nonce for EOA"
      },
      "getSession(address)": {
        "notice": "Get current session for Primary EOA"
      },
      "invalidateSession()": {
        "notice": "Stop allowing your current authorized burner address to use your NFTs."
      },
      "ownershipSigner()": {
        "notice": "Get ownershipSigner address"
      },
      "preflight((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)": {
        "notice": "Submit a meta-tx request and signature to check validity and receive         a response with data useful for fetching a trusted proof per EIP-3668."
      },
      "setOwnershipSigner(address)": {
        "notice": "Change the ownership signer"
      },
      "verify((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)": {
        "notice": "Submit a meta-tx request where a proof of ownership is not required."
      },
      "verifyOwnershipProof((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)": {
        "notice": "Verify signed OffchainLookup proof against meta-tx request data"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4063,
        "contract": "contracts/NFightGasStation/NFightGasStation.sol:NFightGasStation",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4058_storage)"
      },
      {
        "astId": 11841,
        "contract": "contracts/NFightGasStation/NFightGasStation.sol:NFightGasStation",
        "label": "_ownershipSigner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11846,
        "contract": "contracts/NFightGasStation/NFightGasStation.sol:NFightGasStation",
        "label": "_sessions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(PlaySession)11830_storage)"
      },
      {
        "astId": 11351,
        "contract": "contracts/NFightGasStation/NFightGasStation.sol:NFightGasStation",
        "label": "_nonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11357,
        "contract": "contracts/NFightGasStation/NFightGasStation.sol:NFightGasStation",
        "label": "_tokenNonces",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 11360,
        "contract": "contracts/NFightGasStation/NFightGasStation.sol:NFightGasStation",
        "label": "urls",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(PlaySession)11830_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IForwardRequest.PlaySession)",
        "numberOfBytes": "32",
        "value": "t_struct(PlaySession)11830_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4058_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4058_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PlaySession)11830_storage": {
        "encoding": "inplace",
        "label": "struct IForwardRequest.PlaySession",
        "members": [
          {
            "astId": 11827,
            "contract": "contracts/NFightGasStation/NFightGasStation.sol:NFightGasStation",
            "label": "authorized",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11829,
            "contract": "contracts/NFightGasStation/NFightGasStation.sol:NFightGasStation",
            "label": "expiresAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)4058_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4055,
            "contract": "contracts/NFightGasStation/NFightGasStation.sol:NFightGasStation",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4057,
            "contract": "contracts/NFightGasStation/NFightGasStation.sol:NFightGasStation",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}